// Script de pr√©paration finale pour d√©ploiement Hostinger
const fs = require('fs');
const path = require('path');

function checkDeploymentReadiness() {
  console.log("üîç V√âRIFICATION FINALE AVANT D√âPLOIEMENT HOSTINGER\n");

  let checks = [];
  let warnings = [];
  let errors = [];

  // 1. V√©rifier que le build existe
  const buildExists = fs.existsSync('.next');
  checks.push({
    name: "Build de production",
    status: buildExists ? "‚úÖ" : "‚ùå",
    details: buildExists ? "Build .next/ pr√©sent" : "Ex√©cutez 'npm run build' d'abord"
  });
  if (!buildExists) errors.push("Build manquant");

  // 2. V√©rifier package.json
  const packageJson = JSON.parse(fs.readFileSync('package.json', 'utf8'));
  checks.push({
    name: "Package.json",
    status: "‚úÖ",
    details: `Version ${packageJson.version}, ${Object.keys(packageJson.dependencies).length} d√©pendances`
  });

  // 3. V√©rifier les d√©pendances MySQL
  const hasMysql = packageJson.dependencies['mysql2'];
  checks.push({
    name: "Driver MySQL",
    status: hasMysql ? "‚úÖ" : "‚ùå",
    details: hasMysql ? `mysql2 v${hasMysql}` : "mysql2 manquant"
  });
  if (!hasMysql) errors.push("Driver MySQL manquant");

  // 4. V√©rifier les fichiers environnement
  const envFiles = [
    { file: '.env.production', required: true },
    { file: '.env.hostinger', required: false }
  ];

  envFiles.forEach(env => {
    const exists = fs.existsSync(env.file);
    checks.push({
      name: `Fichier ${env.file}`,
      status: exists ? "‚úÖ" : (env.required ? "‚ùå" : "‚ö†Ô∏è"),
      details: exists ? "Pr√©sent" : "√Ä configurer avec vos identifiants"
    });
    if (!exists && env.required) {
      errors.push(`${env.file} manquant`);
    } else if (!exists) {
      warnings.push(`${env.file} optionnel mais recommand√©`);
    }
  });

  // 5. V√©rifier le sch√©ma Prisma
  const schemaContent = fs.readFileSync('prisma/schema.prisma', 'utf8');
  const isMySQL = schemaContent.includes('provider = "mysql"');
  checks.push({
    name: "Schema Prisma",
    status: isMySQL ? "‚úÖ" : "‚ö†Ô∏è",
    details: isMySQL ? "Configur√© pour MySQL" : "Configur√© pour SQLite (local)"
  });
  if (!isMySQL) warnings.push("Schema pas encore en MySQL");

  // 6. V√©rifier les dossiers critiques
  const criticalDirs = [
    { dir: 'public', required: true },
    { dir: 'prisma', required: true },
    { dir: '.next', required: true }
  ];

  criticalDirs.forEach(dirInfo => {
    const exists = fs.existsSync(dirInfo.dir);
    checks.push({
      name: `Dossier ${dirInfo.dir}/`,
      status: exists ? "‚úÖ" : "‚ùå",
      details: exists ? "Pr√©sent" : "Manquant"
    });
    if (!exists && dirInfo.required) {
      errors.push(`Dossier ${dirInfo.dir} manquant`);
    }
  });

  // 7. V√©rifier la taille du build
  const buildSize = getBuildSize('.next');
  checks.push({
    name: "Taille du build",
    status: buildSize > 0 ? "‚úÖ" : "‚ùå",
    details: buildSize > 0 ? `${(buildSize / 1024 / 1024).toFixed(1)} MB` : "Ind√©termin√©e"
  });

  // Affichage des r√©sultats
  console.log("üìã R√âSULTATS DE LA V√âRIFICATION :");
  console.log("=" .repeat(50));
  
  checks.forEach(check => {
    console.log(`${check.status} ${check.name.padEnd(20)} ‚Üí ${check.details}`);
  });

  console.log("\nüéØ PROCHAINES √âTAPES HOSTINGER :");
  console.log("=" .repeat(50));
  
  if (errors.length > 0) {
    console.log("‚ùå ERREURS √Ä CORRIGER :");
    errors.forEach(error => console.log(`   ‚Ä¢ ${error}`));
    console.log("\nüîß ACTIONS REQUISES :");
    if (errors.includes("Build manquant")) console.log("   1. Ex√©cutez: npm run build");
    if (errors.includes("Driver MySQL manquant")) console.log("   2. Ex√©cutez: npm install mysql2");
    if (errors.includes(".env.production manquant")) console.log("   3. Cr√©ez .env.production avec vos identifiants MySQL");
    return false;
  }

  if (warnings.length > 0) {
    console.log("‚ö†Ô∏è AVERTISSEMENTS :");
    warnings.forEach(warning => console.log(`   ‚Ä¢ ${warning}`));
    console.log("");
  }

  console.log("‚úÖ √âTAPES MANUELLES SUR HOSTINGER :");
  console.log("   1. üóÑÔ∏è Cr√©er la base MySQL dans votre panneau");
  console.log("   2. üìù Noter les identifiants de connexion");
  console.log("   3. ‚úèÔ∏è Modifier .env.production avec vos vraies infos");
  console.log("   4. üöÄ Lancer: npm run deploy:hostinger");
  
  console.log("\nüìñ DOCUMENTATION COMPL√àTE :");
  console.log("   ‚Üí Voir HOSTINGER_DEPLOYMENT.md");
  console.log("   ‚Üí Voir HOSTINGER_DATABASE.md");

  console.log("\nüéâ PROJET PR√äT POUR LE D√âPLOIEMENT HOSTINGER !");
  return true;
}

function getBuildSize(dir) {
  try {
    let size = 0;
    const files = fs.readdirSync(dir);
    files.forEach(file => {
      const filePath = path.join(dir, file);
      const stat = fs.statSync(filePath);
      if (stat.isDirectory()) {
        size += getBuildSize(filePath);
      } else {
        size += stat.size;
      }
    });
    return size;
  } catch (error) {
    return 0;
  }
}

// Ex√©cuter la v√©rification
const ready = checkDeploymentReadiness();
process.exit(ready ? 0 : 1);